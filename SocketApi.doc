1.1 发送请求
    请求数据格式为：{'event':'addChannel','channel':'channelValue','parameters':{'api_key':'value1','sign':'value2'}} 
    其中event: addChannel(注册请求数据)/removeChannel(注销请求数据)/push(提交数据) 
    channel：提供请求数据类型 
    data 参数为选填参数，
    binary 参数为选填参数，压缩数据: 1 压缩数据 ,0 原始数据 默认 0 
    其中api_key 为用户申请apiKey,sign 为签名字符串，签名规则参照请求说明
    例如：websocket.send("{'event':'addChannel','channel':'ok_sub_spot_usd_btc_ticker','binary','1'}")
    websocket.send("[{'event':'addChannel','channel':'ok_sub_spot_usd_btc_ticker'},{'event':'addChannel','channel':'ok_sub_spot_usd_btc_depth'},{'event':'addChannel','channel':'ok_sub_spot_usd_btc_trades'}]");支持批量注册。

    其中签名和数据压缩功能暂时不实现

1.2 服务器响应
    返回数据格式为： [{"channel":"channel","success":"","errorcode":"","parameters":{}}, {"channel":"channel","success":"","errorcode":1,"data":{}}] 
    channel:请求的数据类型
    success:true成功,false失败(用于WebSocket 交易API)
    data：返回结果数据
    errorcode:错误码(用于WebSocket 交易API)
    
    错误代码	详细描述
    10000	必填参数为空
    10001	参数错误
    10002	验证失败
    10003	该连接已经请求了其他用户的实时交易数据
    10004	该连接没有请求此用户的实时交易数据
    10005	api_key或者sign不合法
    10008	非法参数



WebSocket API

（1）获取市场深度
    客户端订阅数据：websocket.send(" {'event':'addChannel','channel':'market','parameters': { symbol: 'btc#usd' } } ");
    客户端发送数据：websocket.send(" {'event':'push','channel':'market','parameters': { depths: [{ site:"qq", symbol: 'btc#usd',bids: [[19000,1.02],[19899,0.95],[19888.5,0.87]] }]} } "); 

    示例
    # Request 
    {'event':'addChannel','channel':'market','parameters': { symbol: 'btc#usd' } }
    其中， symbol为交易品种，如果为"*",表示全部交易品种
     
    # Response
    {
        channel: "market",
        isSuccess: true,
        data: [
            site: "baidu",  //网站名称
            symbol: "btc#usd", //交易品种，如果为"*",则表示订阅如 "btc#usd"表示使用美元兑换比特币的交易品种
            bids: [[19000,1.02],[19899,0.95],[19888.5,0.87]],   //array, 买单深度,已按照价格降序排列 数组索引(string) 0 价格, 1 量(张)
            asks: [[19100,1.03],[19105,0.98]]   //array,卖单深度,已按照价格升序排列 数组索引(string) 0 价格, 1 量(张)
            timestamp: res.realPrice.time //long, 服务器时间戳
        ]
    }


(2) 获取持仓信息

    客户端订阅数据：websocket.send(" {'event':'addChannel','channel':'position' } ");
    客户端发送数据：websocket.send(" {'event':'push','channel':'market','parameters': { depths: [{ site:"qq", symbol: 'btc#usd',bids: [[19000,1.02],[19899,0.95],[19888.5,0.87]] }]} } "); 

    示例
    # Request 
    {'event':'addChannel','channel':'position' }
     
    # Response
    {

    }

(3) 获取账户资产情况

    客户端订阅数据：websocket.send(" {'event':'addChannel','channel':'market','parameters': { symbol: 'btc#usd' } } ");
    客户端发送数据：websocket.send(" {'event':'push','channel':'market','parameters': { depths: [{ site:"qq", symbol: 'btc#usd',bids: [[19000,1.02],[19899,0.95],[19888.5,0.87]] }]} } "); 

    示例
    # Request 
    {'event':'addChannel','channel':'market','parameters': { symbol: 'btc#usd' } }
    其中， symbol为交易品种，如果为"*",表示全部交易品种
     
    # Response
    {
        site: "baidu",  //网站名称
        symbol: "btc#usd", //交易品种，如果为"*",则表示订阅如 "btc#usd"表示使用美元兑换比特币的交易品种
        bids: [[19000,1.02],[19899,0.95],[19888.5,0.87]],   //array, 买单深度,已按照价格降序排列 数组索引(string) 0 价格, 1 量(张)
        asks: [[19100,1.03],[19105,0.98]]   //array,卖单深度,已按照价格升序排列 数组索引(string) 0 价格, 1 量(张)
        timestamp: res.realPrice.time //long, 服务器时间戳
    }


(4) 即时委托信息
    # Response

    {
        site: site, //交易网站名称
        "channel": "order", //数据类型。包括market、order、position、wallet等 
        "isSuccess": true,
        //"errorcode":"",
        "data": [{
            outerId: apiOrder.id, //对应的第三方交易网站委托id
            symbol: common.getApiSymbol(apiOrder.symbol,true), //交易品种
            type: type, //委托类型。如按市场价委托，移动止损委托等  “LIMIT”, “MARKET”, “STOP”, “TRAILING_STOP”, “EXCHANGE_MARKET”, “EXCHANGE_LIMIT”, “EXCHANGE_STOP”, “EXCHANGE_TRAILING_STOP”, “FOK”, “EXCHANGE_FOK”
            status: status,//status可能的值:wait,准备开始；consign: 已委托,但未成交；success,已完成; 
                            //part_success,部分成功;will_cancel,已标记为取消,但是尚未完成;canceled: 已取消；
                            //auto_retry: 委托超过一定时间未成交，已由系统自动以不同价格发起新的委托; failed,失败
            dealAmount: 1, //已成交数量。>0时，为多仓； < 0时，为空仓
            amount: 2, //数量。>0时，为多仓； < 0时，为空仓
            side: "buy",  //交易类型。可能的值：buy(买入或者期货中的开仓)或sell(卖出或者期货中的平仓)
            created: +apiOrder.mtsCreate, //时间戳
            price: apiOrder.price, //委托价格
            avgPrice: apiOrder.priceAvg, //平均成交价格
            hidden: apiOrder.hidden, //是否为隐藏单 
            maker: apiOrder.maker
        }]
    }



   
